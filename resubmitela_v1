using System;
using System.Collections;
using System.IO;
using System.Net;
using Microsoft.IdentityModel.Clients.ActiveDirectory;

namespace getauthtoken
{
    class Program
    {
        static void Main(string[] args)
        {
            string token = GetAccessToken();
            ResubmitLA(token);
        }


        public static string GetAccessToken()
        {
            string tenantId = "281f80a1-d40a-4aed-b28c-255bcdfb9a79";
            string authContextURL = "https://login.windows.net/" + tenantId;
            var authenticationContext = new AuthenticationContext(authContextURL);
            var credential = new ClientCredential(clientId: "baf0e24a-d740-405c-849d-89881ae2359e", 
                clientSecret: "iH11fQ_7~Nj_rs4TzY1P1L_783-P4qnZYS");
            var result = authenticationContext.AcquireTokenAsync(resource: "https://management.azure.com/", clientCredential: credential);

            if (result == null)
            {
                throw new InvalidOperationException("Failed to obtain the JWT token");
            }

            string token = result.Result.AccessToken;
            return token;


        }


        private static void ResubmitLA(String token)
        {
            string error = "";
            int count = 0;
            ArrayList runIds = GetRunIds();

            //string url = "https://management.azure.com/subscriptions/cf61774e-cf2f-4cad-9bd2-58f17e51168e/resourceGroups/latest1a1rg/providers/Microsoft.Logic/workflows/latest1a1/triggers/manual/histories/08585861412472785964614034483CU11/resubmit?api-version=2016-06-01";

            foreach (string runid in runIds)
            {
                string url = $"https://management.azure.com/subscriptions/cf61774e-cf2f-4cad-9bd2-58f17e51168e/resourceGroups/latest1a1rg/providers/Microsoft.Logic/workflows/latest1a1/triggers/manual/histories/{runid}/resubmit?api-version=2016-06-01";

                Uri uri = new Uri(String.Format(url));

                // Create the request
                var httpWebRequest = (HttpWebRequest)WebRequest.Create(uri);
                httpWebRequest.Headers.Add(HttpRequestHeader.Authorization, "Bearer " + token);
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.ContentLength = 0;
                httpWebRequest.Method = "POST";

                // Get the response
                HttpWebResponse httpResponse = null;
                try
                {
                    httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                }
                catch (Exception ex)
                {
                    error += runid + "_" + ex.Message + ";";
                }
                count++;
                //string result = null;
                //using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                //{
                //    result = streamReader.ReadToEnd();
                //}

                //return result;
            }

            Console.WriteLine( $"Successfully re-submitted: {count}; errors: {error}");
            Console.Read();
        }

        private static ArrayList GetRunIds()
        {
            ArrayList runIds = new ArrayList();
            runIds.Add("08585861412472785964614034483CU11");
            runIds.Add("08585861334793937252232132399CU20");
            return runIds;
        }


    }
}
